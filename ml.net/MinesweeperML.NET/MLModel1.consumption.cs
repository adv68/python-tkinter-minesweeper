// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace MinesweeperML_NET
{
    public partial class MLModel1
    {
        /// <summary>
        /// model input class for MLModel1.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"in-u2l2")]
            public float In_u2l2 { get; set; }

            [ColumnName(@"in-u2l1")]
            public float In_u2l1 { get; set; }

            [ColumnName(@"in-u2")]
            public float In_u2 { get; set; }

            [ColumnName(@"in-u2r1")]
            public float In_u2r1 { get; set; }

            [ColumnName(@"in-u2r2")]
            public float In_u2r2 { get; set; }

            [ColumnName(@"in-u1l2")]
            public float In_u1l2 { get; set; }

            [ColumnName(@"in-u1l1")]
            public float In_u1l1 { get; set; }

            [ColumnName(@"in-u1")]
            public float In_u1 { get; set; }

            [ColumnName(@"in-u1r1")]
            public float In_u1r1 { get; set; }

            [ColumnName(@"in-u1r2")]
            public float In_u1r2 { get; set; }

            [ColumnName(@"in-l2")]
            public float In_l2 { get; set; }

            [ColumnName(@"in-l1")]
            public float In_l1 { get; set; }

            [ColumnName(@"in-0")]
            public float In_0 { get; set; }

            [ColumnName(@"in-r1")]
            public float In_r1 { get; set; }

            [ColumnName(@"in-r2")]
            public float In_r2 { get; set; }

            [ColumnName(@"in-d1l2")]
            public float In_d1l2 { get; set; }

            [ColumnName(@"in-d1l1")]
            public float In_d1l1 { get; set; }

            [ColumnName(@"in-d1")]
            public float In_d1 { get; set; }

            [ColumnName(@"in-d1r1")]
            public float In_d1r1 { get; set; }

            [ColumnName(@"in-d1r2")]
            public float In_d1r2 { get; set; }

            [ColumnName(@"in-d2l2")]
            public float In_d2l2 { get; set; }

            [ColumnName(@"in-d2l1")]
            public float In_d2l1 { get; set; }

            [ColumnName(@"in-d2")]
            public float In_d2 { get; set; }

            [ColumnName(@"in-d2r1")]
            public float In_d2r1 { get; set; }

            [ColumnName(@"in-d2r2")]
            public float In_d2r2 { get; set; }

            [ColumnName(@"out")]
            public float Out { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel1.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public float Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel1.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
